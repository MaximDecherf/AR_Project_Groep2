{"lines":["Welcome to the demo that showcases RuntimeTextEdit's features.","Every text you can see on the screen can be edited at runtime.\n\nChanges will persist even when restarting the application.","In order to edit a text press & hold right CTRL on your keyboard and click on the text you want to edit with your mouse.\n\nThe tutorial text is locked for your own safety. ;)","You are now in edit mode. Click on the text again and start editing.\n\nPressing right CTRL while in edit mode toggles if rich text tags are displayed or applied.\n\nWhen you are done click outside the text to save your changes. Or ESC if you want to discard your changes.","Your changes are now saved and will persist even when restarting. Try it out if you want.","In order to make a text editable a script called RuntimeTextEdit.cs is attached to the GameObject with a text component on it.\n\nTry to find an instance of RuntimeTextEdit in the Unity Hierarchy under Canvas/Panel or Sign/Signboard.","RuntimeTextEdit components are only enabled while the right CTRL key is held. That way RuntimeTextEdit will not interefere with your code and cause overhead.\n\nRight CTRL activates/deactivates all instances of RuntimeTextEdit in your scene. Try it out.","RuntimeTextEdit is not taking care of saving your text somewhere so that it persists when restarting the application. This can be done in many ways: A text file, a JSON file, a XML file, a whole dialogue system and so on.\n\nPersisting text has to be implemented by you. That way you are free to choose a solution that suits your project best.","When a text has been changed RuntimeTextEdit will call a function named PersistText(string newText, ...).\n\nIn this function you need to make sure to save newText so that it persists when you restart the application.\n\nHave a look into script <i>Sign/Signboard/Unity 3D Text/LoadSaveText_[...]</i>","RuntimeTextEdit will per default search for PersistText(...) inside the same GameObject. PersistText(...) is part of the TextEditCallback interface.\n\nOptionally you can specify another GameObject in the inspector of RuntimeTextEdit where it should search for PersistText(...). This is the case for the GameObject <i>TextMesh Pro UI Text<i> for example.","Inside the RuntimeTextEdit inspector are also callbacks for internal events.\n\nOnArm and OnDisarm are triggered when the right CTRL button is pressed and released.\n\nOnEnterEditMode and OnLeaveEditMode are triggered when editing is started and ended.","These callbacks can be used to disable buttons from being activated when you try to edit their text, see <i>Unity UI Button</i>.\n\nNote that the button does not trigger an action when you hold right CTRL.","Another application of these callbacks is to freeze time while you edit. See <i>Character/Speech</i>. Here, the simulation is paused and then resumed.","Now for a little demonstration.\n\nPressing one of the two buttons makes me jump. While jumping I say something different. Try to edit what I say while I am in the air.","From now on, every time I jump I will say what you entered.","One last thing I want to tell you is the manager. In the hierarchy you can find <i>RuntimeTextEdit Manager</i> with another script having the same name.\n\nEvery scene should always have exactly one manager.","The manager keeps a reference to all instances of RuntimeTextEdit and enables and disables them when the right CTRL button is pressed. You can also configure a different activation button here.","Thank you for listening! <3\n\nPlease consult the documentation for further guidance."]}